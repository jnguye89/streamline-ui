// src/app/services/rtc.service.ts
import { Injectable } from '@angular/core';
import AgoraRTC, {
    IAgoraRTCClient,
    ILocalAudioTrack,
    ILocalVideoTrack,
    IAgoraRTCRemoteUser,
    UID,
} from 'agora-rtc-sdk-ng';

/**
 * Handles all WebRTC audio/video lifecycle:
 *  - join / leave channel
 *  - publish / unpublish local tracks
 *  - subscribe to remote tracks
 */
@Injectable({ providedIn: 'root' })
export class RtcService {
    private client: IAgoraRTCClient = AgoraRTC.createClient({ mode: 'rtc', codec: 'vp8' });
    private localAudio?: ILocalAudioTrack;
    private localVideo?: ILocalVideoTrack;

    /** Fired when a remote user publishes media */
    onUserJoined?: (user: IAgoraRTCRemoteUser) => void;
    /** Fired when a remote user leaves / unpublishes */
    onUserLeft?: (uid: UID) => void;

    constructor() {
        // --- remote user lifecycle ---
        this.client.on('user-published', async (user, mediaType) => {
            await this.client.subscribe(user, mediaType);

            if (mediaType === 'video' && user.videoTrack) {
                // dynamically create a container for remote video
                const elId = `remote-${user.uid}`;
                if (!document.getElementById(elId)) {
                    const div = document.createElement('div');
                    div.id = elId;
                    div.classList.add('remote-tile');
                    document.getElementById('remote-container')?.appendChild(div);
                }
                user.videoTrack.play(elId);
            }
            if (mediaType === 'audio' && user.audioTrack) user.audioTrack.play();

            this.onUserJoined?.(user);
        });

        this.client.on('user-unpublished', (user) => this.onUserLeft?.(user.uid));
        this.client.on('user-left', (user) => this.onUserLeft?.(user.uid));
    }

    /**
     * Join an RTC channel and publish local tracks.
     * @param appId   Agora App ID
     * @param channel Channel name
     * @param uid     Your user ID (string or number)
     * @param token   Token generated by your backend
     * @param withVideo Whether to publish video (true=video+audio, false=audio-only)
     */
    async join(appId: string, channel: string, uid: UID, token: string, withVideo = true) {
        // join channel
        await this.client.join(appId, channel, token, uid);
        debugger;
        // create local tracks
        this.localAudio = await AgoraRTC.createMicrophoneAudioTrack();
        if (withVideo) this.localVideo = await AgoraRTC.createCameraVideoTrack();

        // publish tracks
        const tracks = [this.localAudio, this.localVideo].filter(Boolean) as (ILocalAudioTrack | ILocalVideoTrack)[];
        if (tracks.length) await this.client.publish(tracks);

        // render local preview
        if (this.localVideo) {
            const el = document.getElementById('local-player');
            if (el) this.localVideo.play(el);
        }

        console.log(`âœ… Joined channel ${channel} as ${uid}`);
    }

    async leave() {
        try {
            await this.client.unpublish();
        } catch (e) {
            console.warn('unpublish failed', e);
        } finally {
            this.localAudio?.close();
            this.localVideo?.close();
            this.localAudio = undefined;
            this.localVideo = undefined;
            await this.client.leave();
            console.log('ðŸ‘‹ Left RTC channel');
        }
    }

    async toggleMic(mute: boolean) {
        if (!this.localAudio) return;
        await this.localAudio.setEnabled(!mute);
    }

    async toggleCam(mute: boolean) {
        if (!this.localVideo) return;
        await this.localVideo.setEnabled(!mute);
    }
}
